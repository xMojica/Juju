openapi: 3.0.0
info:
    title: API de Libros y Usuarios
    description: API para gestionar libros y usuarios, con autenticación mediante tokens.
    version: 1.0.0
servers:
    - url: http://localhost:3001
      description: Servidor local
    - url: https://juju-2ygz.onrender.com
      description: Servidor produccion

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        Libro:
            type: object
            properties:
                titulo:
                    type: string
                    example: El Quijote
                autor:
                    type: string
                    example: Miguel de Cervantes
                ano_publicacion:
                    type: date
                    example: "1605"
                estado:
                    type: string
                    example: disponible
        Usuario:
            type: object
            properties:
                email:
                    type: string
                    example: santiago@yahoo.es
                nombre:
                    type: string
                    example: Santiago Mojica
                telefono:
                    type: string
                    example: "3245648432"
                clave:
                    type: string
                    example: M1c0ntr4s3n4

paths:
    /api/libros:
        get:
            summary: Obtener todos los libros
            operationId: getAllBooks
            tags:
                - Libros
            responses:
                "200":
                    description: Lista de todos los libros obtenida correctamente
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Libro"
                "500":
                    description: Error interno del servidor
        post:
            summary: Crear un nuevo libro
            operationId: createBook
            tags:
                - Libros
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Libro"
            responses:
                "201":
                    description: Libro creado correctamente
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Libro"
                "400":
                    description: Datos inválidos
                "500":
                    description: Error interno del servidor
    /api/libros/{id}:
        get:
            summary: Obtener un libro por ID
            operationId: getBookById
            tags:
                - Libros
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60c72b2f9b1e8b001c8e4b8a
            responses:
                "200":
                    description: Libro obtenido correctamente
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Libro"
                "400":
                    description: ID no válido
                "404":
                    description: Libro no encontrado
                "500":
                    description: Error interno del servidor
        put:
            summary: Actualizar un libro por ID
            operationId: updateBookById
            tags:
                - Libros
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60c72b2f9b1e8b001c8e4b8a
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Libro"
            responses:
                "200":
                    description: Libro actualizado correctamente
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Libro"
                "400":
                    description: Datos inválidos
                "404":
                    description: Libro no encontrado
                "500":
                    description: Error interno del servidor
        delete:
            summary: Eliminar un libro por ID
            operationId: deleteBookById
            tags:
                - Libros
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60c72b2f9b1e8b001c8e4b8a
            responses:
                "204":
                    description: Libro eliminado correctamente
                "400":
                    description: ID no válido
                "404":
                    description: Libro no encontrado
                "500":
                    description: Error interno del servidor

    /api/register:
        post:
            summary: Registrar un nuevo usuario
            operationId: registerUser
            tags:
                - Usuarios
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Usuario"
            responses:
                "201":
                    description: Usuario registrado correctamente
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Usuario"
                "400":
                    description: Datos inválidos o el usuario ya existe
                "500":
                    description: Error interno del servidor

    /api/login:
        post:
            summary: Iniciar sesión
            operationId: loginUser
            tags:
                - Usuarios
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: usuario@example.com
                                clave:
                                    type: string
                                    example: contraseña123
            responses:
                "200":
                    description: Inicio de sesión exitoso
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        example: token_de_ejemplo
                "400":
                    description: Datos inválidos
                "401":
                    description: Clave incorrecta
                "404":
                    description: Usuario no encontrado
                "500":
                    description: Error interno del servidor
